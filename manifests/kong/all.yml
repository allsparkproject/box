apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: kong
spec:
  type: NodePort
  externalTrafficPolicy: Cluster
  ports:
  - name: kong-proxy
    nodePort: 30080
    port: 30080
    targetPort: 8000
    protocol: TCP
  selector:
    app: kong
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kong
spec:
  ports:
  - name: pgql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
---
apiVersion: apps/v1  #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: StatefulSet
metadata:
  name: postgres
  namespace: kong
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:9.6
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: kong-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-credentials
              key: password
        - name: POSTGRES_DB
          value: kong
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
          - containerPort: 5432
      # No pre-stop hook is required, a SIGTERM plus some time is all that's
      # needed for graceful shutdown of a node.
      terminationGracePeriodSeconds: 60
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: ingress-kong
  name: kong-ingress-controller
  namespace: kong
spec:
  selector:
    matchLabels:
      app: ingress-kong
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # the returned metrics are related to the kong ingress controller not kong itself
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: ingress-kong
    spec:
      serviceAccountName: kong-serviceaccount
      initContainers:
      - name: kong-migration
        image: kong:0.13.0-centos
        env:
          - name: KONG_PG_USER
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: username
          - name: KONG_PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: password
          - name: KONG_PG_HOST
            value: postgres.kong.svc.cluster.local
        command: [ "/bin/sh", "-c", "kong migrations up --vv" ]
      containers:
      - name: admin-api
        image: kong:0.13.0-centos
        env:
          - name: KONG_PG_USER
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: username
          - name: KONG_PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: password
          - name: KONG_PG_HOST
            value: postgres.kong.svc.cluster.local
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 0.0.0.0:8001
          - name: KONG_PROXY_LISTEN
            value: 'off'
        ports:
        - name: kong-admin
          containerPort: 8001
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      - name: ingress-controller
        args:
        - /kong-ingress-controller
        # the kong URL points to the kong admin api server
        - --kong-url=http://localhost:8001
        # the default service is the kong proxy service
        - --default-backend-service=kong/kong-proxy
        - --publish-service=kong/kong-proxy
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: ${KUBERNETES_SERVICE_HOST}
        - name: KUBERNETES_SERVICE_PORT
          value: "${KUBERNETES_SERVICE_PORT}"
        image: quay.io/cloud104/kong-ingress-controller:0.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
  namespace: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
    spec:
      containers:
      - name: kong-proxy
        image: kong:0.13.0-centos
        env:
          - name: KONG_PG_USER
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: username
          - name: KONG_PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kong-credentials
                key: password
          - name: KONG_PG_HOST
            value: postgres.kong.svc.cluster.local
          - name: KONG_PROXY_ACCESS_LOG
            value: "/dev/stdout"
          - name: KONG_PROXY_ERROR_LOG
            value: "/dev/stderr"
          - name: KONG_ADMIN_LISTEN
            value: 'off'
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP